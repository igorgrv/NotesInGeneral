git clone repositorioHttps;
git checkout develope
git checkout -b alteracao-no-readme-igor
--- desenvolve --
git add .
git commit -m "detalhar o que foi feito"

git checkout develope
git pull
git merge alteracao-no-readme-igor




---------------------------------------------------
git diff, mostra as alterações por linha

git config local --local user.name "igor"
git config local --local user.email "igor"

git branch -a | lista todas as branchs (locais e remotas)

git stash | não comitou mas teve alteração, entao ele tira do fluxo e deixa arquivado



VERSIONAMENTO DE CODIGO

*Para que precisamos versionar um código? De certa forma, mexer em um projeto pode ser assustador, pois podemos mexer em algo e danificar
outras. Porque, dependendo da mudança fica dificil voltar ao estado anterior.
*Um versionador e o sistema que ira gerenciar as versoes do projeto
*Uma solução para as mudança é o versionamento de codigo.

GIT
	- Com o GIT podemos escolher o arquivo que será comitado.
	- DOWNLOAD para WINDOWS: 


CODIGOS:
	cd [permite que acesse o repositorio]
		- cd Caelum [irá acessar o repositorio Caelum]
		
	
	$ git init [cria um repositorio]
	$ git clone git://endereco.git [cria um clone do diretorio informado para a maquina local, ir fazer o downlaod]
	$ git status [irá demonstrar o que esta para ser alterado e etc]
		#Changes to be committed: [estarão os arquivos que serao comitados]
		#Changes not staged for commit: [estarão os arquivos que EXISTEM e COM ALTERAÇÃO]
		#Untracked files: [estarao ARQUIVOS NOVOS]
	$ git add seunome.txt[irá adicionar o arquivo SEUNOME]
	$ git commit -m [informa a mensagem para ser adicionada]
	$ git commit -a -m [adiciona todos]
	$ git push [ira adicionar ao GITHUB]
	$ git log [ira exibir os commites feitos]
		$ git log --oneline
		$ git log --oneline -n 2 [ira exibir os 2 commits]
      [PARA SAIR DO GIT LOG PRESSIONE O BOTAO 'Q']
	$ git branch [lista os branches existentes do repositorio]

PADRÃO PARA LIMPAR UNTRACKED FILES:
  $ git clean -n [ira exibir oq sera excluido]
  $ git clean -f [ira remover todos untracked]

PADRÃO PARA ATUALIZAR MASTER E INCLUIR A WORK:
  $ git checkout -b sessao
  'realiza as alterações necessaria
    $ git add -A
    $ git commit -am "atualizacoes na branch"
  $ git checkout master
  $ git pull
  $ git checkout sessao
  $ git rebase master
  $ git checkout master
  $ git merge sessao 
  $ git branch -d sessao
  'atualizar no git
  $ git push
  
PADRÃO PARA VOLTAR A UMA VERSÃO MAIS ANTIGA:
  $ git log --oneline -n4
  'ira gerar a lista de commits feito > selecione o commit desejado
  
  $ git reset -hard b173970
  'b173970 é o numero do commit
  
  ou
  
  $ git checkout b173970 [selecione o commit que deseja voltar]
		
BRANCH:
Toda aplicação possui uma branch MASTER, onde fica o cdigo em producao.
	-Ex.: O joão esta desenvolvendo o cadastro de usuario, sendo assim ele ira criar a branch cadastro.
		$ git checkout -b sessao
		
	  Apos joao ter criado o projeto, precisa adicionar o projeto a Master, porém antes precisamos do branch master atualizado
	  $ git pull
	  $ git checkout sessao
		
		Apos ter atualizado branch cadastro com as att de master, esta na hora de atualizar a master com as novas inf. da branch cadastro
	  $ git rebase master
	  $ git checkout master
	  $ git merge sessao
		
    João não precisa mais da branch cadastro, podera deletar
    $ git branch -d sessao
    
    Basta agora atualziar o github
    $ git push