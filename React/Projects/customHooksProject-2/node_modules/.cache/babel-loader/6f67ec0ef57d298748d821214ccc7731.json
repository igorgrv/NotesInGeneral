{"ast":null,"code":"var _jsxFileName = \"/Users/igorromero/NotesInGeneral/React/Projects/customHooksProject-2/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Tasks from './components/Tasks/Tasks';\nimport NewTask from './components/NewTask/NewTask';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [tasks, setTasks] = useState([]);\n\n  const fetchTasks = taskText => {\n    setIsLoading(true);\n    setError(null);\n    axios.get('https://react-my-burger-igor-default-rtdb.firebaseio.com/tasks.json').then(res => {\n      console.log(res[taskKey]);\n      const loadedTasks = [];\n\n      for (const taskKey in res) {\n        /* console.log(taskKey)\n        console.log(res[taskKey]) */\n        loadedTasks.push({\n          id: taskKey,\n          text: res[taskKey].text\n        });\n      }\n\n      console.log(loadedTasks);\n      setTasks(loadedTasks);\n    }).catch(err => {\n      setError(err.message || 'Something went wrong!');\n    });\n    setIsLoading(false);\n  };\n  /*   const fetchTasks = async (taskText) => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const response = await fetch(\n          'https://react-my-burger-igor-default-rtdb.firebaseio.com/tasks.json'\n        );\n  \n        if (!response.ok) {\n          throw new Error('Request failed!');\n        }\n  \n        const data = await response.json();\n  \n        const loadedTasks = [];\n  \n        for (const taskKey in data) {\n          loadedTasks.push({ id: taskKey, text: data[taskKey].text });\n        }\n  \n        setTasks(loadedTasks);\n      } catch (err) {\n        setError(err.message || 'Something went wrong!');\n      }\n      setIsLoading(false);\n    }; */\n\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  const taskAddHandler = task => {\n    setTasks(prevTasks => prevTasks.concat(task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NewTask, {\n      onAddTask: taskAddHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tasks, {\n      items: tasks,\n      loading: isLoading,\n      error: error,\n      onFetch: fetchTasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"47V/V/up9U9rSJyqYIMJNeWJ16w=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/igorromero/NotesInGeneral/React/Projects/customHooksProject-2/src/App.js"],"names":["React","useEffect","useState","axios","Tasks","NewTask","App","isLoading","setIsLoading","error","setError","tasks","setTasks","fetchTasks","taskText","get","then","res","console","log","taskKey","loadedTasks","push","id","text","catch","err","message","taskAddHandler","task","prevTasks","concat"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,OAAP,MAAoB,8BAApB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMW,UAAU,GAAIC,QAAD,IAAc;AAC/BN,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAP,IAAAA,KAAK,CAACY,GAAN,CAAU,qEAAV,EACCC,IADD,CACOC,GAAD,IAAS;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAD,CAAf;AACA,YAAMC,WAAW,GAAG,EAApB;;AACA,WAAK,MAAMD,OAAX,IAAsBH,GAAtB,EAA2B;AACzB;AACR;AACQI,QAAAA,WAAW,CAACC,IAAZ,CAAiB;AAAEC,UAAAA,EAAE,EAAEH,OAAN;AAAeI,UAAAA,IAAI,EAAEP,GAAG,CAACG,OAAD,CAAH,CAAaI;AAAlC,SAAjB;AACD;;AAEDN,MAAAA,OAAO,CAACC,GAAR,CAAYE,WAAZ;AAEAT,MAAAA,QAAQ,CAACS,WAAD,CAAR;AACD,KAbD,EAaGI,KAbH,CAaUC,GAAD,IAAS;AAChBhB,MAAAA,QAAQ,CAACgB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD,KAfD;AAgBAnB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GApBD;AAsBF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEEP,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMe,cAAc,GAAIC,IAAD,IAAU;AAC/BjB,IAAAA,QAAQ,CAAEkB,SAAD,IAAeA,SAAS,CAACC,MAAV,CAAiBF,IAAjB,CAAhB,CAAR;AACD,GAFD;;AAIA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,SAAS,EAAED;AAApB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AACE,MAAA,KAAK,EAAEjB,KADT;AAEE,MAAA,OAAO,EAAEJ,SAFX;AAGE,MAAA,KAAK,EAAEE,KAHT;AAIE,MAAA,OAAO,EAAEI;AAJX;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAzEQP,G;;KAAAA,G;AA2ET,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nimport Tasks from './components/Tasks/Tasks';\nimport NewTask from './components/NewTask/NewTask';\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [tasks, setTasks] = useState([]);\n\n  const fetchTasks = (taskText) => {\n    setIsLoading(true);\n    setError(null);\n    axios.get('https://react-my-burger-igor-default-rtdb.firebaseio.com/tasks.json')\n    .then((res) => {\n      console.log(res[taskKey])\n      const loadedTasks = [];\n      for (const taskKey in res) {\n        /* console.log(taskKey)\n        console.log(res[taskKey]) */\n        loadedTasks.push({ id: taskKey, text: res[taskKey].text });\n      }\n\n      console.log(loadedTasks)\n\n      setTasks(loadedTasks);\n    }).catch((err) => {\n      setError(err.message || 'Something went wrong!');\n    })\n    setIsLoading(false);\n  }\n\n/*   const fetchTasks = async (taskText) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\n        'https://react-my-burger-igor-default-rtdb.firebaseio.com/tasks.json'\n      );\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n\n      const loadedTasks = [];\n\n      for (const taskKey in data) {\n        loadedTasks.push({ id: taskKey, text: data[taskKey].text });\n      }\n\n      setTasks(loadedTasks);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n    setIsLoading(false);\n  }; */\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  const taskAddHandler = (task) => {\n    setTasks((prevTasks) => prevTasks.concat(task));\n  };\n\n  return (\n    <React.Fragment>\n      <NewTask onAddTask={taskAddHandler} />\n      <Tasks\n        items={tasks}\n        loading={isLoading}\n        error={error}\n        onFetch={fetchTasks}\n      />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}