{"ast":null,"code":"var _jsxFileName = \"/Users/igorromero/NotesInGeneral/React/foodOrderProject/src/state/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nimport CartContext from './cart-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartValue = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cardReducer = (prevState, action) => {\n  if (action.type === 'ADD') {\n    const updatedTotalAmount = prevState.totalAmount + action.item.price * action.item.amount;\n    const currentCartItemIndex = prevState.items.findIndex(item => item.id === action.item.id); // 1, 2\n\n    const currentCartItem = prevState.items[currentCartItemIndex]; // name: xx, amount: 2\n\n    let updatedItems;\n\n    if (currentCartItem) {\n      const updatedItem = { ...currentCartItem,\n        amount: currentCartItem.amount + action.item.amount\n      }; // irá pegar o objeto item existente e atualizar o amount\n\n      updatedItems = [...prevState.items]; // recupera a lista de todos items\n\n      updatedItems[currentCartItemIndex] = updatedItem; // atualiza somente o item q teve o amount alterado\n    } else {\n      updatedItems = prevState.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartValue;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCart] = useReducer(cardReducer, defaultCartValue);\n\n  const addItemHandler = item => {\n    dispatchCart({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemHandler = id => {\n    dispatchCart({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const cartValue = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemHandler,\n    removeItem: removeItemHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CartProvider, \"PP6vBV4ZRNwOicCMUVDERhIk28c=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/igorromero/NotesInGeneral/React/foodOrderProject/src/state/CartProvider.js"],"names":["useReducer","CartContext","defaultCartValue","items","totalAmount","cardReducer","prevState","action","type","updatedTotalAmount","item","price","amount","currentCartItemIndex","findIndex","id","currentCartItem","updatedItems","updatedItem","concat","CartProvider","props","cartState","dispatchCart","addItemHandler","removeItemHandler","cartValue","addItem","removeItem","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB;;AAKA,MAAMC,WAAW,GAAG,CAACC,SAAD,EAAYC,MAAZ,KAAuB;AACzC,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AACzB,UAAMC,kBAAkB,GAAGH,SAAS,CAACF,WAAV,GAAwBG,MAAM,CAACG,IAAP,CAAYC,KAAZ,GAAoBJ,MAAM,CAACG,IAAP,CAAYE,MAAnF;AACA,UAAMC,oBAAoB,GAAGP,SAAS,CAACH,KAAV,CAAgBW,SAAhB,CAA2BJ,IAAD,IAAUA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACG,IAAP,CAAYK,EAA5D,CAA7B,CAFyB,CAEqE;;AAC9F,UAAMC,eAAe,GAAGV,SAAS,CAACH,KAAV,CAAgBU,oBAAhB,CAAxB,CAHyB,CAGsC;;AAE/D,QAAII,YAAJ;;AAEA,QAAID,eAAJ,EAAqB;AACnB,YAAME,WAAW,GAAG,EAAE,GAAGF,eAAL;AAAsBJ,QAAAA,MAAM,EAAEI,eAAe,CAACJ,MAAhB,GAAyBL,MAAM,CAACG,IAAP,CAAYE;AAAnE,OAApB,CADmB,CAC8E;;AACjGK,MAAAA,YAAY,GAAG,CAAC,GAAGX,SAAS,CAACH,KAAd,CAAf,CAFmB,CAEkB;;AACrCc,MAAAA,YAAY,CAACJ,oBAAD,CAAZ,GAAqCK,WAArC,CAHmB,CAG+B;AACnD,KAJD,MAIO;AACLD,MAAAA,YAAY,GAAGX,SAAS,CAACH,KAAV,CAAgBgB,MAAhB,CAAuBZ,MAAM,CAACG,IAA9B,CAAf;AACD;;AAED,WAAO;AACLP,MAAAA,KAAK,EAAEc,YADF;AAELb,MAAAA,WAAW,EAAEK;AAFR,KAAP;AAID;;AACD,SAAOP,gBAAP;AACD,CAtBD;;AAwBA,MAAMkB,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BvB,UAAU,CAACK,WAAD,EAAcH,gBAAd,CAA5C;;AAEA,QAAMsB,cAAc,GAAId,IAAD,IAAU;AAC/Ba,IAAAA,YAAY,CAAC;AAAEf,MAAAA,IAAI,EAAE,KAAR;AAAeE,MAAAA,IAAI,EAAEA;AAArB,KAAD,CAAZ;AACD,GAFD;;AAIA,QAAMe,iBAAiB,GAAIV,EAAD,IAAQ;AAChCQ,IAAAA,YAAY,CAAC;AAAEf,MAAAA,IAAI,EAAE,QAAR;AAAkBO,MAAAA,EAAE,EAAEA;AAAtB,KAAD,CAAZ;AACD,GAFD;;AAIA,QAAMW,SAAS,GAAG;AAChBvB,IAAAA,KAAK,EAAEmB,SAAS,CAACnB,KADD;AAEhBC,IAAAA,WAAW,EAAEkB,SAAS,CAAClB,WAFP;AAGhBuB,IAAAA,OAAO,EAAEH,cAHO;AAIhBI,IAAAA,UAAU,EAAEH;AAJI,GAAlB;AAOA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,SAA7B;AAAA,cAAyCL,KAAK,CAACQ;AAA/C;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAnBD;;GAAMT,Y;;KAAAA,Y;AAqBN,eAAeA,YAAf","sourcesContent":["import { useReducer } from 'react';\nimport CartContext from './cart-context';\n\nconst defaultCartValue = {\n  items: [],\n  totalAmount: 0,\n};\n\nconst cardReducer = (prevState, action) => {\n  if (action.type === 'ADD') {\n    const updatedTotalAmount = prevState.totalAmount + action.item.price * action.item.amount;\n    const currentCartItemIndex = prevState.items.findIndex((item) => item.id === action.item.id); // 1, 2\n    const currentCartItem = prevState.items[currentCartItemIndex]; // name: xx, amount: 2\n\n    let updatedItems;\n\n    if (currentCartItem) {\n      const updatedItem = { ...currentCartItem, amount: currentCartItem.amount + action.item.amount }; // irá pegar o objeto item existente e atualizar o amount\n      updatedItems = [...prevState.items]; // recupera a lista de todos items\n      updatedItems[currentCartItemIndex] = updatedItem; // atualiza somente o item q teve o amount alterado\n    } else {\n      updatedItems = prevState.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount,\n    };\n  }\n  return defaultCartValue;\n};\n\nconst CartProvider = (props) => {\n  const [cartState, dispatchCart] = useReducer(cardReducer, defaultCartValue);\n\n  const addItemHandler = (item) => {\n    dispatchCart({ type: 'ADD', item: item });\n  };\n\n  const removeItemHandler = (id) => {\n    dispatchCart({ type: 'REMOVE', id: id });\n  };\n\n  const cartValue = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemHandler,\n    removeItem: removeItemHandler,\n  };\n\n  return <CartContext.Provider value={cartValue}>{props.children}</CartContext.Provider>;\n};\n\nexport default CartProvider;\n"]},"metadata":{},"sourceType":"module"}