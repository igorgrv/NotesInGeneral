ANOTACOES JPA HIBERNATE
-----------------------------------------------------------------------------------------------------------
ARQUIVOS BASE:
  - persistence.xml
  
 -------------------- MÉTODOS PERSISTE/HIBERNATE ------------------------------------------------------
  - find --> pode-se utilizar como WHERE [Tarefa localizaPorId = manager.find(Tarefa.class, 1L)]
  - remove --> utilizado como DELETE
  - merge --> utilizado como UPDATE
  - persist --> utilizado como INSERT [manager.persist(tarefa);]
  
------------------ GERANDO TABELAS ------------------------------------------------------
*Para gerar as tabelas é necessário que seja criado uma fabrica de Conexão:
  
  EntityManagerFactory factory = Persistence.createEntityManagerFactory("tarefas");
  factory.close();
  
*Para se trabalhar com objetos é necessário criar um Gerenciador/Manager
  
  EntityManager	manager	=	fact
  ory.createEntityManager();
  manager.close();

------------------ CÓDIGOS UTILIZADOS NOS MODELOS ------------------------------------------------------
CÓDIGO BASE:
  @Entity --> indica o objeto para se tornar persistível (MODELO)
  @Table(name="tarefas") --> indica que será a Tabela com nome XXXX
  
P/ COLUNAS:
  @Id --> indica que aquele atributo é um ID
  @GeneratedValue --> serve para referenciar o ID como AUTO_INCREMENT
  @Column(nullable = false) --> Indica que não pode ser nulo
  @Column(name = "nomeDaColuna", nullable = false) --> irá criar a coluna com este nome

  @Size(min=10, max=256, message = "Deu ruim")
  @DateTimeFormat(pattern="dd/MM/yyyy")
  @Temporal(TemporalType.DATE)  --> Temporal utilizado para datas / TemporalType indica o tipo de dado
  @Temporal(TemporalType.TIME)  --> TemporalType, retorna o horário
	      
CÓDIGO NOS DAOS:
  @Repository --> declara a classe como componente
  @Autowired --> é a anotação para amarrar o construtor d Controller com o Dao

------------------ EXEMPLOS SEM O SPRING ------------------------------------------------------
public class AdicionaCurso {

	public static void main(String[] args) {
		Cursos curso = new Cursos();
		curso.setNome("Java");
		curso.setDataCriacao(Calendar.getInstance());
		
		EntityManagerFactory factory = Persistence.createEntityManagerFactory("cursos");
		EntityManager manager = factory.createEntityManager();
		
		manager.getTransaction().begin();;
		manager.persist(curso);
		manager.getTransaction().commit();
		
		System.out.println("Usuario " + curso.getNome() + " inserido no banco de dados");
		
		manager.close();
	}
}

public class RemoveCurso {

	public static void main(String[] args) {
		
		EntityManagerFactory factory = Persistence.createEntityManagerFactory("cursos");
		EntityManager manager = factory.createEntityManager();
		
		Cursos curso = manager.find(Cursos.class, 2);
		
		manager.getTransaction().begin();
		manager.remove(curso);
		manager.getTransaction().commit();
		
		System.out.println("Removendo o curso " + curso.getNome() + " - ID: " + curso.getId());
		
		manager.close();

	}
}

public class EncontraCurso {

	public static void main(String[] args) {
		EntityManagerFactory factory = Persistence.createEntityManagerFactory("cursos");
		EntityManager manager = factory.createEntityManager();
		
		Cursos curso = manager.find(Cursos.class, 1);
		
		System.out.println("Curso " + curso.getNome() + " Localizado, com ID: " + curso.getId());

	}
}

public class AtualizaCurso {

	public static void main(String[] args) {
		Cursos curso = new Cursos();
		curso.setId(1);
		curso.setNome("Java Spring");
		curso.setDataCriacao(Calendar.getInstance());
		
		EntityManagerFactory factory = Persistence.createEntityManagerFactory("cursos");
		EntityManager manager = factory.createEntityManager();
		
		manager.getTransaction().begin();
		manager.merge(curso);
		manager.getTransaction().commit();
		
		System.out.println("Curso " + curso.getNome() + " atualizado!");
		
		manager.close();

	}
}

public class ListaCurso {

	public static void main(String[] args) {
		EntityManagerFactory factory = Persistence.createEntityManagerFactory("cursos");
		EntityManager manager = factory.createEntityManager();
		
		Query query = manager.createQuery("select t from Cursos as t");
		
		List<Cursos> curso = query.getResultList();
		
		for (Cursos cursos : curso) {
			System.out.println(cursos.getNome());
		}
	}
}
public class ListaCursoWithWhere {

	public static void main(String[] args) {
		EntityManagerFactory factory = Persistence.createEntityManagerFactory("cursos");
		EntityManager manager = factory.createEntityManager();
		
		Query query = manager.createQuery("select t from Cursos as t where t.dataCriacao = :paramData");
		query.setParameter("paramData", Calendar.getInstance());
		
		List<Cursos> curso = query.getResultList();
		
		for (Cursos cursos : curso) {
			System.out.println(cursos.getNome());
		}
	}
}
------------------ EXEMPLOS COM O SPRING ------------------------------------------------------
@Repository
public class CursoDao {

	@PersistenceContext
	private EntityManager manager;
	
	public void addCurso (Cursos curso) {
		manager.persist(curso);
	}
	
	public void updateCurso (Cursos curso) {
		manager.merge(curso);
	}
	
	public Cursos getId (long id) {
		return manager.find(Cursos.class, id);
	}
	
	public void remove (long id) {
		Cursos curso = getId(id);
		manager.remove(curso);
	}
	
	@SuppressWarnings("unchecked")
	public List<Cursos> list (){
		return manager.createQuery("SELECT c FROM Cursos as c").getResultList();
	}
	
	public boolean existeUsuario(Usuario usuario) {
		TypedQuery<Usuario> query = manager.createQuery("SELECT u FROM Usuario as u WHERE u.login = :paramLogin AND u.senha = :paramSenha", Usuario.class);
		query.setParameter("paramLogin", usuario.getLogin());
		query.setParameter("paramSenha", usuario.getSenha());
		
		Usuario user = query.getSingleResult();
		
		if(user == null) {
			return false;
		} else {
			return true;
		}
		//List<Usuario> list = query.getResultList();
	}
	
}

@Controller
@Transactional
public class CursoController {

	@Autowired
	private CursoDao dao;
	
	@RequestMapping("/formCurso")
	public String formCurso () {
		return "curso/formCurso";
	}
	
	@RequestMapping("/listCurso")
	public String listCurso (Model model) {
		model.addAttribute("curso", dao.list());
		return "curso/listCurso";
	}
	
	@RequestMapping("addCurso")
	public String addCurso (Cursos curso) {
		dao.addCurso(curso);
		return "redirect: listCurso";
	}
	
	@RequestMapping("removeCurso")
	public String removeCurso (Long id) {
		dao.remove(id);
		return "redirect: listCurso";
	}
	
	@RequestMapping("editCurso")
	public String editForm (Model model, Long id) {
		model.addAttribute("curso", dao.getId(id));
		return "curso/editForm";
	}
	
	@RequestMapping("updateCurso")
	public String updateCurso (Cursos curso) {
		dao.updateCurso(curso);
		return "redirect: listCurso" ;
	}
}

//---------------- VIEWS-----------------------------

<h2>Alterando o curso ${curso.nome} - ID: ${curso.id}</h2>
<form action="updateCurso" method="POST">
  <input type="hidden" name="id" value="${curso.id}">
  Nome Curso: <input type="text" name="nome" value="${curso.nome}"> <br>
  Curso ativo: <input type="checkbox" name="ativo" value="true" ${curso.ativo? 'checked' : ''}> <br>
  Data início turma: <input type="text" name="dataInicio" value='<fmt:formatDate value="${curso.dataInicio.time}" pattern="dd/MM/yyyy" />'> <br>
  <input type="submit" value="Atualiza Curso">
</form>
  
  